package com.worldcup.automation;

import com.worldcup.calculator.TournamentStatsCalculator;
import com.worldcup.database.DatabaseManager;
import com.worldcup.generator.DataGenerator;
import com.worldcup.model.Group;
import com.worldcup.model.Match;
import com.worldcup.model.Player;
import com.worldcup.model.Team;
import com.worldcup.service.TeamService;
import com.worldcup.service.TournamentService;
import com.worldcup.service.PlayerService;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class WorldCupAutomation {
    private DatabaseManager dbManager;
    // DataGenerator has only static methods, no instance needed
    private TournamentStatsCalculator statsCalculator;
    private TeamService teamService;
    private TournamentService tournamentService;
    private PlayerService playerService;
    private List<Team> teams;
    private List<Match> matches;
    private List<Group> groups;
    private int currentTournamentId;
    private Random random = new Random();

    public WorldCupAutomation() {
        this.dbManager = new DatabaseManager();
        // DataGenerator uses static methods only
        this.statsCalculator = new TournamentStatsCalculator(dbManager);
        this.teamService = new TeamService(dbManager);
        this.tournamentService = new TournamentService(dbManager);
        this.playerService = new PlayerService(dbManager);

        this.teams = new ArrayList<>();
        this.groups = new ArrayList<>();
        this.matches = new ArrayList<>();
    }


    public void runCompleteWorldCup() {
        try {
            // B∆∞·ªõc 1: T·∫°o gi·∫£i ƒë·∫•u m·ªõi v·ªõi d·ªØ li·ªáu random
            createTournament();

            // B∆∞·ªõc 2: T·∫°o c√°c ƒë·ªôi b√≥ng
            generateTeams();

            // B∆∞·ªõc 3: T·∫°o b·∫£ng ƒë·∫•u v√† ph√¢n chia ƒë·ªôi
            createGroupsAndAssignTeams();

            // B∆∞·ªõc 5: Ch·∫°y v√≤ng b·∫£ng
            runGroupStage();

            // B∆∞·ªõc 6: X√°c ƒë·ªãnh ƒë·ªôi nh·∫•t v√† nh√¨ b·∫£ng
            List<Team> qualifiedTeams = determineQualifiedTeams();

            // B∆∞·ªõc 7: Ch·∫°y v√≤ng lo·∫°i tr·ª±c ti·∫øp
            runKnockoutStage(qualifiedTeams);

            // B∆∞·ªõc 8: T·∫°o th·ªëng k√™ cu·ªëi gi·∫£i
            generateTournamentStatistics();

            // B∆∞·ªõc 9: T√≠nh to√°n l·∫°i tournament stats ch√≠nh x√°c
            recalculateCurrentTournamentStats();


            // B∆∞·ªõc 12: Hi·ªÉn th·ªã k·∫øt qu·∫£
            displayFinalResults();

            System.out.println("üéâ World Cup ho√†n th√†nh th√†nh c√¥ng!");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói trong qu√° tr√¨nh m√¥ ph·ªèng World Cup: " + e.getMessage());
            e.printStackTrace();
        }
    }


    private void createTournament() throws SQLException {
        System.out.println("Kh·ªüi t·∫°o c√°c c·∫ßu th·ªß v√† ƒë·ªôi");

        int randomYear = DataGenerator.getRandomWorldCupYear(); // tr·∫£ v·ªÅ 1 nƒÉm
        String randomHostCountry = DataGenerator.getRandomHostCountry(); // tr·∫£ v·ªÅ 1 ƒë·ªãa ƒëi·ªÉm
        String[] randomDates = DataGenerator.generateTournamentDates(randomYear); // tr·∫£ v·ªÅ yyyy/MM/dd
        String name = DataGenerator.generateTournamentName(randomYear); // tr·∫£ v·ªÅ t√™n gi·∫£i ƒë·∫•u

        System.out.println("ƒê√£ t·∫°o gi·∫£i ƒë·∫•u: " + name);
        System.out.println("NƒÉm: " + randomYear);
        System.out.println("N∆∞·ªõc ch·ªß nh√†: " + randomHostCountry);
        System.out.println("Ng√†y b·∫Øt ƒë·∫ßu: " + randomDates[0]);
        System.out.println("Ng√†y k·∫øt th√∫c: " + randomDates[1]);

        String sql = """
                    INSERT INTO tournaments (name, year, host_country, start_date, end_date)
                    VALUES (?, ?, ?, ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setString(1, name);
        pstmt.setInt(2, randomYear);
        pstmt.setString(3, randomHostCountry);
        pstmt.setString(4, randomDates[0]); // start_date d·∫°ng YYYY/MM/DD
        pstmt.setString(5, randomDates[1]); // end_date d·∫°ng YYYY/MM/DD
        pstmt.executeUpdate();
        pstmt.close();
        currentTournamentId = dbManager.getLastInsertId();
    }

    private void generateTeams() throws SQLException {
        System.out.println("T·∫°o 32 ƒë·ªôi b√≥ng...");

        teams = DataGenerator.generateRandomTeams(32);

        for (Team team : teams) {
            insertTeamToDatabase(team);
        }

        System.out.println("‚úÖ ƒê√£ t·∫°o " + teams.size() + " ƒë·ªôi b√≥ng");
    }

    private void insertTeamToDatabase(Team team) throws SQLException {
        // Th√™m ƒë·ªôi b√≥ng
        String teamSql = """
                    INSERT INTO teams (name, region, coach, medical_staff, is_host, tournament_id)
                    VALUES (?, ?, ?, ?, ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(teamSql);
        pstmt.setString(1, team.getName());
        pstmt.setString(2, team.getRegion());
        pstmt.setString(3, team.getCoach());
        pstmt.setString(4, team.getMedicalStaff());
        pstmt.setBoolean(5, team.isHost());
        pstmt.setInt(6, currentTournamentId);
        pstmt.executeUpdate();
        pstmt.close();

        int teamId = dbManager.getLastInsertId();

        // Th√™m tr·ª£ l√Ω hu·∫•n luy·ªán vi√™n
        for (String assistant : team.getAssistantCoaches()) {
            String assistantSql = "INSERT INTO assistant_coaches (name, team_id) VALUES (?, ?)";
            PreparedStatement assistantPstmt = dbManager.getConnection().prepareStatement(assistantSql);
            assistantPstmt.setString(1, assistant);
            assistantPstmt.setInt(2, teamId);
            assistantPstmt.executeUpdate();
            assistantPstmt.close();
        }

        // Th√™m c·∫ßu th·ªß ch√≠nh
        for (Player player : team.getStartingPlayers()) {
            insertPlayerToDatabase(player, teamId, true);
        }

        // Th√™m c·∫ßu th·ªß d·ª± b·ªã
        for (Player player : team.getSubstitutePlayers()) {
            insertPlayerToDatabase(player, teamId, false);
        }
    }

    private void insertPlayerToDatabase(Player player, int teamId, boolean isStarting) throws SQLException {
        String sql = """
                    INSERT INTO players (name, jersey_number, position, team_id, is_starting, yellow_cards, red_cards, is_eligible)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setString(1, player.getName());
        pstmt.setInt(2, player.getJerseyNumber());
        pstmt.setString(3, player.getPosition());
        pstmt.setInt(4, teamId);
        pstmt.setBoolean(5, isStarting);
        pstmt.setInt(6, player.getYellowCards());
        pstmt.setInt(7, player.getRedCards());
        pstmt.setBoolean(8, player.isEligible());
        pstmt.executeUpdate();
        pstmt.close();
    }

    private void createGroupsAndAssignTeams() throws SQLException {
        System.out.println("T·∫°o b·∫£ng ƒë·∫•u v√† ph√¢n chia ƒë·ªôi...");

        for (String groupName : DataGenerator.getGroupsName()) {
            String sql = "INSERT INTO groups (name, tournament_id) VALUES (?, ?)";
            PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
            pstmt.setString(1, groupName);
            pstmt.setInt(2, currentTournamentId);
            pstmt.executeUpdate();
            pstmt.close();

            int groupId = dbManager.getLastInsertId();
            Group group = new Group(groupId, groupName);
            groups.add(group);
        }

        // Ph√¢n chia ƒë·ªôi v√†o c√°c b·∫£ng (4 ƒë·ªôi m·ªói b·∫£ng)
        Collections.shuffle(teams); // Ng·∫´u nhi√™n h√≥a vi·ªác ph√¢n chia ƒë·ªôi

        for (int i = 0; i < teams.size(); i++) {
            int groupIndex = i / 4; // 4 ƒë·ªôi m·ªói b·∫£ng
            int groupId = groupIndex + 1; // ID b·∫£ng b·∫Øt ƒë·∫ßu t·ª´ 1

            // C·∫≠p nh·∫≠t ƒë·ªôi v·ªõi b·∫£ng ƒë∆∞·ª£c ph√¢n
            String sql = "UPDATE teams SET group_id = ? WHERE name = ? AND tournament_id = ?";
            PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
            pstmt.setInt(1, groupId);
            pstmt.setString(2, teams.get(i).getName());
            pstmt.setInt(3, currentTournamentId);
            pstmt.executeUpdate();
            pstmt.close();

            // Th√™m ƒë·ªôi v√†o ƒë·ªëi t∆∞·ª£ng b·∫£ng
            groups.get(groupIndex).addTeam(teams.get(i));
        }

        System.out.println("ƒê√£ t·∫°o 8 b·∫£ng ƒë·∫•u v·ªõi 4 ƒë·ªôi m·ªói b·∫£ng");
    }

    private void runGroupStage() throws SQLException {
        System.out.println("Ch·∫°y c√°c tr·∫≠n ƒë·∫•u v√≤ng b·∫£ng...");

        for (int groupIndex = 0; groupIndex < groups.size(); groupIndex++) {
            Group group = groups.get(groupIndex);
            List<Team> groupTeams = group.getTeams();

            System.out.println("C√°c tr·∫≠n ƒë·∫•u B·∫£ng " + group.getName() + ":");

            // T·∫°o t·∫•t c·∫£ c√°c tr·∫≠n ƒë·∫•u c√≥ th·ªÉ trong b·∫£ng (t·ªïng 6 tr·∫≠n)
            for (int i = 0; i < groupTeams.size(); i++) {
                for (int j = i + 1; j < groupTeams.size(); j++) {
                    Team teamA = groupTeams.get(i);
                    Team teamB = groupTeams.get(j);

                    simulateMatch(teamA, teamB, "GROUP", groupIndex + 1);
                }
            }
        }

        System.out.println("V√≤ng b·∫£ng ho√†n th√†nh");
    }

    private void simulateMatch(Team teamA, Team teamB, String matchType, int groupId) throws SQLException {
        // T·∫°o k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u
        int[] score = DataGenerator.generateMatchScore();
        int teamAScore = score[0];
        int teamBScore = score[1];

        String venue = DataGenerator.getRandomVenue();
        String referee = DataGenerator.getRandomReferee();
        
        // Format date as yyyy/mm/dd
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy/MM/dd");
        String matchDate = dateFormat.format(new java.util.Date(System.currentTimeMillis() + random.nextInt(1000000000)));

        // Th√™m tr·∫≠n ƒë·∫•u (removed round_number and status columns)
        String matchSql = """
                    INSERT INTO matches (team_a_id, team_b_id, team_a_score, team_b_score, match_type, 
                                       match_date, venue, referee)
                    VALUES ((SELECT id FROM teams WHERE name = ? AND tournament_id = ?), 
                            (SELECT id FROM teams WHERE name = ? AND tournament_id = ?), 
                            ?, ?, ?, ?, ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(matchSql);
        pstmt.setString(1, teamA.getName());
        pstmt.setInt(2, currentTournamentId);
        pstmt.setString(3, teamB.getName());
        pstmt.setInt(4, currentTournamentId);
        pstmt.setInt(5, teamAScore);
        pstmt.setInt(6, teamBScore);
        pstmt.setString(7, matchType);
        pstmt.setString(8, matchDate);
        pstmt.setString(9, venue);
        pstmt.setString(10, referee);
        pstmt.executeUpdate();
        pstmt.close();

        int matchId = dbManager.getLastInsertId();

        // T·∫°o c√°c s·ª± ki·ªán tr·∫≠n ƒë·∫•u (b√†n th·∫Øng, th·∫ª, thay ng∆∞·ªùi)
        generateMatchEvents(matchId, teamA, teamB, teamAScore, teamBScore);

        System.out.println("  " + teamA.getName() + " " + teamAScore + " - " + teamBScore + " " + teamB.getName());
    }


    private void generateMatchEvents(int matchId, Team teamA, Team teamB, int teamAScore, int teamBScore) throws SQLException {
        // T·∫°o b√†n th·∫Øng cho ƒë·ªôi A
        generateGoalsForTeam(matchId, teamA, teamAScore);

        // T·∫°o b√†n th·∫Øng cho ƒë·ªôi B
        generateGoalsForTeam(matchId, teamB, teamBScore);

        // T·∫°o th·∫ª v√† thay ng∆∞·ªùi
        generateCardsAndSubstitutions(matchId, teamA, teamB);
    }

    private void generateGoalsForTeam(int matchId, Team team, int goalCount) throws SQLException {
        for (int i = 0; i < goalCount; i++) {
            // Ch·ªçn c·∫ßu th·ªß ng·∫´u nhi√™n t·ª´ ƒë·ªôi h√¨nh xu·∫•t ph√°t
            List<Player> startingPlayers = team.getStartingPlayers();
            if (!startingPlayers.isEmpty()) {
                Player scorer = DataGenerator.getRandomElement(startingPlayers);
                int minute = DataGenerator.generateRandomMinute();

                String sql = """
                            INSERT INTO goals (match_id, player_id, team_id, minute, goal_type)
                            VALUES (?, (SELECT id FROM players WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)), 
                                    (SELECT id FROM teams WHERE name = ? AND tournament_id = ?), ?, 'REGULAR')
                        """;

                PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
                pstmt.setInt(1, matchId);
                pstmt.setString(2, scorer.getName());
                pstmt.setString(3, team.getName());
                pstmt.setInt(4, currentTournamentId);
                pstmt.setString(5, team.getName());
                pstmt.setInt(6, currentTournamentId);
                pstmt.setInt(7, minute);
                pstmt.executeUpdate();
                pstmt.close();
                
                // C·∫≠p nh·∫≠t goals trong b·∫£ng players
                String updatePlayerSql = """
                    UPDATE players 
                    SET goals = goals + 1 
                    WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)
                """;
                PreparedStatement updateStmt = dbManager.getConnection().prepareStatement(updatePlayerSql);
                updateStmt.setString(1, scorer.getName());
                updateStmt.setString(2, team.getName());
                updateStmt.setInt(3, currentTournamentId);
                updateStmt.executeUpdate();
                updateStmt.close();
            }
        }
    }

    private void generateCardsAndSubstitutions(int matchId, Team teamA, Team teamB) throws SQLException {
        // T·∫°o th·∫ª cho c·∫£ hai ƒë·ªôi
        generateCardsForTeam(matchId, teamA);
        generateCardsForTeam(matchId, teamB);

        // T·∫°o thay ng∆∞·ªùi cho c·∫£ hai ƒë·ªôi
        generateSubstitutionsForTeam(matchId, teamA);
        generateSubstitutionsForTeam(matchId, teamB);
    }

    private void generateCardsForTeam(int matchId, Team team) throws SQLException {
        List<Player> allPlayers = new ArrayList<>(team.getStartingPlayers());

        // Th·∫ª v√†ng
        if (DataGenerator.shouldHaveYellowCard()) {
            Player player = DataGenerator.getRandomElement(allPlayers);
            if (player != null) {
                int minute = DataGenerator.generateRandomMinute();
                insertCard(matchId, team, player, "YELLOW", minute);
            }
        }

        // Th·∫ª ƒë·ªè (√≠t ph·ªï bi·∫øn h∆°n)
        if (DataGenerator.shouldHaveRedCard()) {
            Player player = DataGenerator.getRandomElement(allPlayers);
            if (player != null) {
                int minute = DataGenerator.generateRandomMinute();
                insertCard(matchId, team, player, "RED", minute);
            }
        }
    }

    private void insertCard(int matchId, Team team, Player player, String cardType, int minute) throws SQLException {
        String sql = """
                    INSERT INTO cards (match_id, player_id, team_id, card_type, minute)
                    VALUES (?, (SELECT id FROM players WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)), 
                            (SELECT id FROM teams WHERE name = ? AND tournament_id = ?), ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setInt(1, matchId);
        pstmt.setString(2, player.getName());
        pstmt.setString(3, team.getName());
        pstmt.setInt(4, currentTournamentId);
        pstmt.setString(5, team.getName());
        pstmt.setInt(6, currentTournamentId);
        pstmt.setString(7, cardType);
        pstmt.setInt(8, minute);
        pstmt.executeUpdate();
        pstmt.close();
        
        // C·∫≠p nh·∫≠t cards trong b·∫£ng players
        String updatePlayerSql;
        if ("YELLOW".equals(cardType)) {
            updatePlayerSql = """
                UPDATE players 
                SET yellow_cards = yellow_cards + 1 
                WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)
            """;
        } else {
            updatePlayerSql = """
                UPDATE players 
                SET red_cards = red_cards + 1 
                WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)
            """;
        }
        
        PreparedStatement updateStmt = dbManager.getConnection().prepareStatement(updatePlayerSql);
        updateStmt.setString(1, player.getName());
        updateStmt.setString(2, team.getName());
        updateStmt.setInt(3, currentTournamentId);
        updateStmt.executeUpdate();
        updateStmt.close();
    }

    private void generateSubstitutionsForTeam(int matchId, Team team) throws SQLException {
        if (DataGenerator.shouldHaveSubstitution()) {
            int substitutionCount = random.nextInt(3) + 1; // 1-3 l·∫ßn thay ng∆∞·ªùi

            for (int i = 0; i < substitutionCount && i < team.getSubstitutePlayers().size(); i++) {
                Player playerOut = DataGenerator.getRandomElement(team.getStartingPlayers());
                Player playerIn = DataGenerator.getRandomElement(team.getSubstitutePlayers());

                if (playerOut != null && playerIn != null) {
                    int minute = DataGenerator.generateSubstitutionMinute();

                    String sql = """
                                INSERT INTO substitutions (match_id, team_id, player_in_id, player_out_id, minute)
                                VALUES (?, (SELECT id FROM teams WHERE name = ? AND tournament_id = ?), 
                                        (SELECT id FROM players WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)),
                                        (SELECT id FROM players WHERE name = ? AND team_id = (SELECT id FROM teams WHERE name = ? AND tournament_id = ?)), ?)
                            """;

                    PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
                    pstmt.setInt(1, matchId);
                    pstmt.setString(2, team.getName());
                    pstmt.setInt(3, currentTournamentId);
                    pstmt.setString(4, playerIn.getName());
                    pstmt.setString(5, team.getName());
                    pstmt.setInt(6, currentTournamentId);
                    pstmt.setString(7, playerOut.getName());
                    pstmt.setString(8, team.getName());
                    pstmt.setInt(9, currentTournamentId);
                    pstmt.setInt(10, minute);
                    pstmt.executeUpdate();
                    pstmt.close();
                }
            }
        }
    }

    private List<Team> determineQualifiedTeams() throws SQLException {
        System.out.println("üèÖ ƒêang x√°c ƒë·ªãnh c√°c ƒë·ªôi v∆∞·ª£t qua v√≤ng b·∫£ng...");

        // S·ª≠ d·ª•ng TournamentService ƒë·ªÉ l·∫•y qualified teams v·ªõi logic Java
        List<Team> qualifiedTeams = tournamentService.getQualifiedTeamsCalculatedInJava(currentTournamentId);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        displayQualifiedTeams(qualifiedTeams);

        return qualifiedTeams;
    }

    /**
     * Hi·ªÉn th·ªã c√°c ƒë·ªôi ƒë√£ v∆∞·ª£t qua v√≤ng b·∫£ng
     */
    private void displayQualifiedTeams(List<Team> qualifiedTeams) throws SQLException {
        // L·∫•y group standings ƒë·ªÉ hi·ªÉn th·ªã
        Map<String, List<Team>> groupStandings = tournamentService.getAllGroupStandingsCalculatedInJava(currentTournamentId);
        
        List<Team> firstPlaceTeams = new ArrayList<>();
        List<Team> secondPlaceTeams = new ArrayList<>();
        
        for (Map.Entry<String, List<Team>> entry : groupStandings.entrySet()) {
            String groupName = entry.getKey();
            List<Team> teams = entry.getValue();
            
            if (teams.size() >= 2) {
                System.out.println("ü•á Nh·∫•t B·∫£ng " + groupName + ": " + teams.get(0).getName());
                System.out.println("ü•à Nh√¨ B·∫£ng " + groupName + ": " + teams.get(1).getName());
                
                firstPlaceTeams.add(teams.get(0));
                secondPlaceTeams.add(teams.get(1));
            }
        }

        // T·∫°o danh s√°ch ƒë·ªôi v∆∞·ª£t qua v·ªõi gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi ph√π h·ª£p
        List<Team> roundOf16Teams = createRoundOf16Pairings(firstPlaceTeams, secondPlaceTeams);

        System.out.println("‚úÖ " + roundOf16Teams.size() + " ƒë·ªôi ƒë√£ v√†o v√≤ng lo·∫°i tr·ª±c ti·∫øp");
    }

    private List<Team> createRoundOf16Pairings(List<Team> firstPlace, List<Team> secondPlace) {
        System.out.println("\nüèÜ Gh√©p ƒê√¥i V√≤ng 16 ƒê·ªôi (Theo Quy ƒê·ªãnh FIFA):");

        List<Team> pairings = new ArrayList<>();

        // Gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi FIFA World Cup:
        // Tr·∫≠n 1: Nh·∫•t b·∫£ng A vs Nh√¨ b·∫£ng B
        pairings.add(firstPlace.get(0));   // Nh·∫•t b·∫£ng A
        pairings.add(secondPlace.get(1));  // Nh√¨ b·∫£ng B
        System.out.println("Tr·∫≠n 1: " + firstPlace.get(0).getName() + " (A1) vs " + secondPlace.get(1).getName() + " (B2)");

        // Tr·∫≠n 2: Nh·∫•t b·∫£ng B vs Nh√¨ b·∫£ng A  
        pairings.add(firstPlace.get(1));   // Nh·∫•t b·∫£ng B
        pairings.add(secondPlace.get(0));  // Nh√¨ b·∫£ng A
        System.out.println("Tr·∫≠n 2: " + firstPlace.get(1).getName() + " (B1) vs " + secondPlace.get(0).getName() + " (A2)");

        // Tr·∫≠n 3: Nh·∫•t b·∫£ng C vs Nh√¨ b·∫£ng D
        pairings.add(firstPlace.get(2));   // Nh·∫•t b·∫£ng C
        pairings.add(secondPlace.get(3));  // Nh√¨ b·∫£ng D
        System.out.println("Tr·∫≠n 3: " + firstPlace.get(2).getName() + " (C1) vs " + secondPlace.get(3).getName() + " (D2)");

        // Tr·∫≠n 4: Nh·∫•t b·∫£ng D vs Nh√¨ b·∫£ng C
        pairings.add(firstPlace.get(3));   // Nh·∫•t b·∫£ng D
        pairings.add(secondPlace.get(2));  // Nh√¨ b·∫£ng C
        System.out.println("Tr·∫≠n 4: " + firstPlace.get(3).getName() + " (D1) vs " + secondPlace.get(2).getName() + " (C2)");

        // Tr·∫≠n 5: Nh·∫•t b·∫£ng E vs Nh√¨ b·∫£ng F
        pairings.add(firstPlace.get(4));   // Nh·∫•t b·∫£ng E
        pairings.add(secondPlace.get(5));  // Nh√¨ b·∫£ng F
        System.out.println("Tr·∫≠n 5: " + firstPlace.get(4).getName() + " (E1) vs " + secondPlace.get(5).getName() + " (F2)");

        // Tr·∫≠n 6: Nh·∫•t b·∫£ng F vs Nh√¨ b·∫£ng E
        pairings.add(firstPlace.get(5));   // Nh·∫•t b·∫£ng F
        pairings.add(secondPlace.get(4));  // Nh√¨ b·∫£ng E
        System.out.println("Tr·∫≠n 6: " + firstPlace.get(5).getName() + " (F1) vs " + secondPlace.get(4).getName() + " (E2)");

        // Tr·∫≠n 7: Nh·∫•t b·∫£ng G vs Nh√¨ b·∫£ng H
        pairings.add(firstPlace.get(6));   // Nh·∫•t b·∫£ng G
        pairings.add(secondPlace.get(7));  // Nh√¨ b·∫£ng H
        System.out.println("Tr·∫≠n 7: " + firstPlace.get(6).getName() + " (G1) vs " + secondPlace.get(7).getName() + " (H2)");

        // Tr·∫≠n 8: Nh·∫•t b·∫£ng H vs Nh√¨ b·∫£ng G
        pairings.add(firstPlace.get(7));   // Nh·∫•t b·∫£ng H
        pairings.add(secondPlace.get(6));  // Nh√¨ b·∫£ng G
        System.out.println("Tr·∫≠n 8: " + firstPlace.get(7).getName() + " (H1) vs " + secondPlace.get(6).getName() + " (G2)");

        System.out.println();
        return pairings;
    }

    private void runKnockoutStage(List<Team> qualifiedTeams) throws SQLException {
        System.out.println("üèÜ ƒêang ch·∫°y v√≤ng lo·∫°i tr·ª±c ti·∫øp...");

        // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t tr·∫°ng th√°i gi·∫£i ƒë·∫•u n·ªØa v√¨ ƒë√£ x√≥a c·ªôt status

        // V√≤ng 16 ƒë·ªôi
        List<Team> quarterFinalists = runKnockoutRound(qualifiedTeams, "ROUND_16");

        // T·ª© k·∫øt
        List<Team> semiFinalists = runKnockoutRound(quarterFinalists, "QUARTER");

        // B√°n k·∫øt
        List<Team> finalists = runKnockoutRound(semiFinalists, "SEMI");

        // X√°c ƒë·ªãnh 2 ƒë·ªôi thua b√°n k·∫øt (ƒë·ªìng h·∫°ng 3 theo quy ƒë·ªãnh FIFA m·ªõi)
        List<Team> thirdPlaceTeams = getThirdPlaceTeams(semiFinalists, finalists);
        if (thirdPlaceTeams.size() == 2) {
            System.out.println("ü•â Hai ƒë·ªôi ƒë·ªìng h·∫°ng 3 (thua b√°n k·∫øt):");
            System.out.println("   " + thirdPlaceTeams.get(0).getName());
            System.out.println("   " + thirdPlaceTeams.get(1).getName());
        }

        // Chung k·∫øt
        if (finalists.size() == 2) {
            System.out.println("üèÜ Tr·∫≠n chung k·∫øt:");
            Team champion = runKnockoutMatch(finalists.get(0), finalists.get(1), "FINAL");
            System.out.println("   ƒê·ªôi v√¥ ƒë·ªãch: " + champion.getName());

            // C·∫≠p nh·∫≠t gi·∫£i ƒë·∫•u v·ªõi k·∫øt qu·∫£ cu·ªëi c√πng
            updateTournamentResults(champion, finalists, thirdPlaceTeams);
        }
    }

    private List<Team> runKnockoutRound(List<Team> teams, String roundType) throws SQLException {
        System.out.println("üî• C√°c tr·∫≠n ƒë·∫•u " + roundType + ":");

        List<Team> winners = new ArrayList<>();

        for (int i = 0; i < teams.size(); i += 2) {
            if (i + 1 < teams.size()) {
                Team winner = runKnockoutMatch(teams.get(i), teams.get(i + 1), roundType);
                winners.add(winner);
            }
        }

        return winners;
    }

    private Team runKnockoutMatch(Team teamA, Team teamB, String matchType) throws SQLException {
        int[] score = DataGenerator.generateMatchScore();
        int teamAScore = score[0];
        int teamBScore = score[1];

        // Trong v√≤ng lo·∫°i tr·ª±c ti·∫øp, c·∫ßn c√≥ ng∆∞·ªùi th·∫Øng - m√¥ ph·ªèng hi·ªáp ph·ª•/penalty n·∫øu c·∫ßn
        if (teamAScore == teamBScore) {
            // M√¥ ph·ªèng lo·∫°t s√∫t penalty
            teamAScore += random.nextBoolean() ? 1 : 0;
            teamBScore += (teamAScore > teamBScore) ? 0 : 1;
        }

        Team winner = (teamAScore > teamBScore) ? teamA : teamB;

        String venue = DataGenerator.getRandomVenue();
        String referee = DataGenerator.getRandomReferee();
        
        // Format date as yyyy/mm/dd
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("yyyy/MM/dd");
        String matchDate = dateFormat.format(new java.util.Date(System.currentTimeMillis() + random.nextInt(1000000000)));

        // Th√™m tr·∫≠n ƒë·∫•u (removed status column)
        String matchSql = """
                    INSERT INTO matches (team_a_id, team_b_id, team_a_score, team_b_score, match_type, 
                                       match_date, venue, referee)
                    VALUES ((SELECT id FROM teams WHERE name = ? AND tournament_id = ?), 
                            (SELECT id FROM teams WHERE name = ? AND tournament_id = ?), 
                            ?, ?, ?, ?, ?, ?)
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(matchSql);
        pstmt.setString(1, teamA.getName());
        pstmt.setInt(2, currentTournamentId);
        pstmt.setString(3, teamB.getName());
        pstmt.setInt(4, currentTournamentId);
        pstmt.setInt(5, teamAScore);
        pstmt.setInt(6, teamBScore);
        pstmt.setString(7, matchType);
        pstmt.setString(8, matchDate);
        pstmt.setString(9, venue);
        pstmt.setString(10, referee);
        pstmt.executeUpdate();
        pstmt.close();

        int matchId = dbManager.getLastInsertId();

        // T·∫°o c√°c s·ª± ki·ªán tr·∫≠n ƒë·∫•u
        generateMatchEvents(matchId, teamA, teamB, teamAScore, teamBScore);

        System.out.println("  " + teamA.getName() + " " + teamAScore + " - " + teamBScore + " " + teamB.getName());

        return winner;
    }

    private List<Team> getThirdPlaceTeams(List<Team> semiFinalists, List<Team> finalists) {
        List<Team> thirdPlaceTeams = new ArrayList<>();
        
        System.out.println("üîç Debug - T√¨m ƒë·ªôi h·∫°ng 3:");
        System.out.println("   S·ªë ƒë·ªôi b√°n k·∫øt: " + semiFinalists.size());
        System.out.println("   S·ªë ƒë·ªôi chung k·∫øt: " + finalists.size());
        
        for (Team team : semiFinalists) {
            System.out.println("   Ki·ªÉm tra ƒë·ªôi: " + team.getName());
            if (!finalists.contains(team)) {
                thirdPlaceTeams.add(team);
                System.out.println("     ‚úÖ Th√™m v√†o danh s√°ch h·∫°ng 3: " + team.getName());
            } else {
                System.out.println("     ‚ùå ƒê·ªôi n√†y v√†o chung k·∫øt: " + team.getName());
            }
        }
        
        System.out.println("   T·ªïng s·ªë ƒë·ªôi h·∫°ng 3: " + thirdPlaceTeams.size());
        return thirdPlaceTeams;
    }

    private void updateTournamentResults(Team champion, List<Team> finalists, List<Team> thirdPlaceTeams) throws SQLException {
        Team runnerUp = finalists.stream().filter(t -> !t.equals(champion)).findFirst().orElse(null);
        
        System.out.println("üèÜ C·∫≠p nh·∫≠t k·∫øt qu·∫£ cu·ªëi c√πng:");
        System.out.println("   Champion: " + champion.getName());
        System.out.println("   Runner-up: " + (runnerUp != null ? runnerUp.getName() : "N/A"));
        
        // Theo quy ƒë·ªãnh FIFA m·ªõi: 2 ƒë·ªôi thua b√°n k·∫øt ƒë·ªìng h·∫°ng 3
        if (thirdPlaceTeams.size() == 2) {
            System.out.println("   Third place (ƒë·ªìng h·∫°ng): " + thirdPlaceTeams.get(0).getName() + " & " + thirdPlaceTeams.get(1).getName());
        }

        // ƒê·∫£m b·∫£o tournament_stats record t·ªìn t·∫°i
        ensureTournamentStatsRecord();

        // S·ª≠ d·ª•ng TournamentService ƒë·ªÉ c·∫≠p nh·∫≠t winners
        Integer championId = getTeamId(champion.getName());
        Integer runnerUpId = runnerUp != null ? getTeamId(runnerUp.getName()) : null;
        
        // L∆∞u c·∫£ 2 ƒë·ªôi ƒë·ªìng h·∫°ng 3 v√†o DB (s·ª≠ d·ª•ng 2 c·ªôt m·ªõi)
        Integer thirdPlaceId01 = null;
        Integer thirdPlaceId02 = null;
        
        if (thirdPlaceTeams.size() >= 1) {
            thirdPlaceId01 = getTeamId(thirdPlaceTeams.get(0).getName());
        }
        if (thirdPlaceTeams.size() >= 2) {
            thirdPlaceId02 = getTeamId(thirdPlaceTeams.get(1).getName());
        }

        System.out.println("üîç Debug - C·∫≠p nh·∫≠t DB:");
        System.out.println("   Tournament ID: " + currentTournamentId);
        System.out.println("   Champion ID: " + championId);
        System.out.println("   Runner-up ID: " + runnerUpId);
        System.out.println("   Third place ID 01: " + thirdPlaceId01);
        System.out.println("   Third place ID 02: " + thirdPlaceId02);

        tournamentService.updateTournamentWinners(currentTournamentId, championId, runnerUpId, thirdPlaceId01, thirdPlaceId02);
        System.out.println("‚úÖ ƒê√£ g·ªçi updateTournamentWinners v·ªõi 2 ƒë·ªôi ƒë·ªìng h·∫°ng 3");
    }



    /**
     * L·∫•y team ID t·ª´ t√™n team
     */
    private Integer getTeamId(String teamName) throws SQLException {
        String sql = "SELECT id FROM teams WHERE name = ? AND tournament_id = ?";
        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setString(1, teamName);
        pstmt.setInt(2, currentTournamentId);
        ResultSet rs = pstmt.executeQuery();

        Integer teamId = null;
        if (rs.next()) {
            teamId = rs.getInt("id");
        }

        rs.close();
        pstmt.close();
        return teamId;
    }

    /**
     * ƒê·∫£m b·∫£o tournament_stats record t·ªìn t·∫°i
     */
    private void ensureTournamentStatsRecord() throws SQLException {
        String checkSql = "SELECT COUNT(*) FROM tournament_stats WHERE tournament_id = ?";
        PreparedStatement checkPstmt = dbManager.getConnection().prepareStatement(checkSql);
        checkPstmt.setInt(1, currentTournamentId);
        ResultSet rs = checkPstmt.executeQuery();

        boolean exists = rs.next() && rs.getInt(1) > 0;
        rs.close();
        checkPstmt.close();

        if (!exists) {
            String insertSql = """
                INSERT INTO tournament_stats (tournament_id, total_goals, total_matches, 
                                            total_yellow_cards, total_red_cards, total_substitutions, 
                                            top_scorer_id, top_scorer_goals)
                VALUES (?, 0, 0, 0, 0, 0, NULL, 0)
            """;

            PreparedStatement insertPstmt = dbManager.getConnection().prepareStatement(insertSql);
            insertPstmt.setInt(1, currentTournamentId);
            insertPstmt.executeUpdate();
            insertPstmt.close();

            System.out.println("‚úÖ ƒê√£ t·∫°o tournament_stats record cho tournament ID: " + currentTournamentId);
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c n√†y ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè v√¨ c·ªôt status kh√¥ng c√≤n t·ªìn t·∫°i
     */
    // private void updateTournamentStatus(String status) throws SQLException {
    //     // ƒê√£ x√≥a c·ªôt status kh·ªèi b·∫£ng tournaments
    // }

    private void generateTournamentStatistics() throws SQLException {
        System.out.println("üìä ƒêang t·∫°o th·ªëng k√™ gi·∫£i ƒë·∫•u...");

        // S·ª≠ d·ª•ng TournamentService ƒë·ªÉ t√≠nh to√°n th·ªëng k√™ b·∫±ng Java
        TournamentService.TournamentStats stats = tournamentService.calculateTournamentStats(currentTournamentId);

        // Ki·ªÉm tra xem tournament_stats ƒë√£ t·ªìn t·∫°i ch∆∞a
        String checkSql = "SELECT COUNT(*) FROM tournament_stats WHERE tournament_id = ?";
        PreparedStatement checkPstmt = dbManager.getConnection().prepareStatement(checkSql);
        checkPstmt.setInt(1, currentTournamentId);
        ResultSet rs = checkPstmt.executeQuery();

        boolean exists = rs.next() && rs.getInt(1) > 0;
        rs.close();
        checkPstmt.close();

        if (!exists) {
            // L∆∞u th·ªëng k√™ v√†o database n·∫øu ch∆∞a t·ªìn t·∫°i
            saveTournamentStatsToDatabase(stats);
        } else {
            // C·∫≠p nh·∫≠t th·ªëng k√™ n·∫øu ƒë√£ t·ªìn t·∫°i
            updateTournamentStatsInDatabase(stats);
        }

        System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªëng k√™ gi·∫£i ƒë·∫•u");
    }
    
    /**
     * L∆∞u th·ªëng k√™ tournament v√†o database
     */
    private void saveTournamentStatsToDatabase(TournamentService.TournamentStats stats) throws SQLException {
        String insertStatsSql = """
                    INSERT INTO tournament_stats (tournament_id, total_goals, total_matches, 
                                                total_yellow_cards, total_red_cards, total_substitutions,
                                                top_scorer_id, top_scorer_goals)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """;

        PreparedStatement insertStatsPstmt = dbManager.getConnection().prepareStatement(insertStatsSql);
        insertStatsPstmt.setInt(1, currentTournamentId);
        insertStatsPstmt.setInt(2, stats.totalGoals);
        insertStatsPstmt.setInt(3, stats.totalMatches);
        insertStatsPstmt.setInt(4, stats.totalYellowCards);
        insertStatsPstmt.setInt(5, stats.totalRedCards);
        insertStatsPstmt.setInt(6, stats.totalSubstitutions);
        if (stats.topScorerId > 0) {
            insertStatsPstmt.setInt(7, stats.topScorerId);
        } else {
            insertStatsPstmt.setNull(7, java.sql.Types.INTEGER);
        }
        insertStatsPstmt.setInt(8, stats.topScorerGoals);
        insertStatsPstmt.executeUpdate();
        insertStatsPstmt.close();
    }

    /**
     * C·∫≠p nh·∫≠t th·ªëng k√™ tournament trong database
     */
    private void updateTournamentStatsInDatabase(TournamentService.TournamentStats stats) throws SQLException {
        String updateStatsSql = """
                    UPDATE tournament_stats SET 
                        total_goals = ?, total_matches = ?, 
                        total_yellow_cards = ?, total_red_cards = ?, 
                        total_substitutions = ?, top_scorer_id = ?, top_scorer_goals = ?
                    WHERE tournament_id = ?
                """;

        PreparedStatement updateStatsPstmt = dbManager.getConnection().prepareStatement(updateStatsSql);
        updateStatsPstmt.setInt(1, stats.totalGoals);
        updateStatsPstmt.setInt(2, stats.totalMatches);
        updateStatsPstmt.setInt(3, stats.totalYellowCards);
        updateStatsPstmt.setInt(4, stats.totalRedCards);
        updateStatsPstmt.setInt(5, stats.totalSubstitutions);
        if (stats.topScorerId > 0) {
            updateStatsPstmt.setInt(6, stats.topScorerId);
        } else {
            updateStatsPstmt.setNull(6, java.sql.Types.INTEGER);
        }
        updateStatsPstmt.setInt(7, stats.topScorerGoals);
        updateStatsPstmt.setInt(8, currentTournamentId);
        updateStatsPstmt.executeUpdate();
        updateStatsPstmt.close();
    }

    private void displayFinalResults() throws SQLException {
        System.out.println("\n" + "=".repeat(50));
        System.out.println("üèÜ K·∫æT QU·∫¢ CU·ªêI C√ôNG FIFA WORLD CUP üèÜ");
        System.out.println("=".repeat(50));

        // L·∫•y k·∫øt qu·∫£ gi·∫£i ƒë·∫•u
        String resultsSql = """
                    SELECT 
                        t.name as tournament_name,
                        t.year,
                        champion.name as champion,
                        runner_up.name as runner_up,
                        ts.total_goals,
                        ts.total_matches,
                        ts.top_scorer_id,
                        ts.top_scorer_goals,
                        top_scorer.name as top_scorer_name
                    FROM tournaments t
                    LEFT JOIN tournament_stats ts ON t.id = ts.tournament_id
                    LEFT JOIN teams champion ON ts.champion_id = champion.id
                    LEFT JOIN teams runner_up ON ts.runner_up_id = runner_up.id
                    LEFT JOIN players top_scorer ON ts.top_scorer_id = top_scorer.id
                    WHERE t.id = ?
                """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(resultsSql);
        pstmt.setInt(1, currentTournamentId);
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            System.out.println("üèÜ V√î ƒê·ªäCH: " + rs.getString("champion"));
            System.out.println("ü•à √Å QU√ÇN: " + rs.getString("runner_up"));
            
            // Hi·ªÉn th·ªã 2 ƒë·ªôi ƒë·ªìng h·∫°ng 3 (theo quy ƒë·ªãnh FIFA m·ªõi)
            displayThirdPlaceTeams();
            System.out.println();
            System.out.println("üìä TH·ªêNG K√ä GI·∫¢I ƒê·∫§U:");
            System.out.println("   T·ªïng s·ªë tr·∫≠n: " + rs.getInt("total_matches"));
            System.out.println("   T·ªïng s·ªë b√†n th·∫Øng: " + rs.getInt("total_goals"));
            
            // Hi·ªÉn th·ªã top scorer t·ª´ tournament_stats
            String topScorerName = rs.getString("top_scorer_name");
            int topScorerGoals = rs.getInt("top_scorer_goals");
            
            if (topScorerName != null && topScorerGoals > 0) {
                System.out.println("   Vua ph√° l∆∞·ªõi: " + topScorerName + " (" + topScorerGoals + " b√†n th·∫Øng)");
            } else {
                System.out.println("   Vua ph√° l∆∞·ªõi: Ch∆∞a c√≥ b√†n th·∫Øng n√†o");
            }
        }

        rs.close();
        pstmt.close();

        // Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng cu·ªëi v√≤ng b·∫£ng
        System.out.println("\nüìã B·∫¢NG X·∫æP H·∫†NG CU·ªêI V√íNG B·∫¢NG:");
        displayGroupStandings();

        System.out.println("\n" + "=".repeat(50));
    }

    private void displayGroupStandings() throws SQLException {
        // S·ª≠ d·ª•ng TournamentService ƒë·ªÉ l·∫•y group standings ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp b·∫±ng Java
        Map<String, List<Team>> groupStandings = tournamentService.getAllGroupStandingsCalculatedInJava(currentTournamentId);
        
        // S·∫Øp x·∫øp t√™n b·∫£ng theo th·ª© t·ª± A, B, C...
        List<String> sortedGroupNames = new ArrayList<>(groupStandings.keySet());
        Collections.sort(sortedGroupNames);
        
        for (String groupName : sortedGroupNames) {
            System.out.println("\nB·∫£ng " + groupName + ":");
            List<Team> teams = groupStandings.get(groupName);
            
            int position = 1;
            for (Team team : teams) {
                String status = position <= 2 ? " ‚úÖ" : "";
                
                // L·∫•y th·ªëng k√™ chi ti·∫øt t·ª´ database (ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã)
                TeamDisplayStats stats = getTeamDisplayStats(team.getName(), currentTournamentId);
                
                System.out.printf("  %d. %-15s %2d pts (%d-%d-%d) %2d:%2d (%+d)%s%n",
                        position,
                        team.getName(),
                        team.getPoints(),
                        stats.wins,
                        stats.draws,
                        stats.losses,
                        stats.goalsFor,
                        stats.goalsAgainst,
                        team.getGoalDifference(),
                        status
                );
                position++;
            }
        }
    }
    
    /**
     * L·∫•y th·ªëng k√™ hi·ªÉn th·ªã cho team (ch·ªâ ƒë·ªÉ hi·ªÉn th·ªã, kh√¥ng d√πng cho logic)
     */
    private TeamDisplayStats getTeamDisplayStats(String teamName, int tournamentId) throws SQLException {
        // T√≠nh to√°n th·ªëng k√™ t·ª´ matches thay v√¨ l·∫•y t·ª´ teams table
        String sql = """
            SELECT 
                t.id as team_id,
                SUM(CASE 
                    WHEN (m.team_a_id = t.id AND m.team_a_score > m.team_b_score) OR 
                         (m.team_b_id = t.id AND m.team_b_score > m.team_a_score) 
                    THEN 1 ELSE 0 END) as wins,
                SUM(CASE 
                    WHEN m.team_a_score = m.team_b_score AND (m.team_a_score > 0 OR m.team_b_score > 0 OR m.team_a_score = 0)
                    THEN 1 ELSE 0 END) as draws,
                SUM(CASE 
                    WHEN (m.team_a_id = t.id AND m.team_a_score < m.team_b_score) OR 
                         (m.team_b_id = t.id AND m.team_b_score < m.team_a_score) 
                    THEN 1 ELSE 0 END) as losses,
                SUM(CASE 
                    WHEN m.team_a_id = t.id THEN m.team_a_score 
                    WHEN m.team_b_id = t.id THEN m.team_b_score 
                    ELSE 0 END) as goals_for,
                SUM(CASE 
                    WHEN m.team_a_id = t.id THEN m.team_b_score 
                    WHEN m.team_b_id = t.id THEN m.team_a_score 
                    ELSE 0 END) as goals_against
            FROM teams t
            LEFT JOIN matches m ON (t.id = m.team_a_id OR t.id = m.team_b_id) AND (m.team_a_score >= 0 AND m.team_b_score >= 0)
            WHERE t.name = ? AND t.tournament_id = ?
            GROUP BY t.id
        """;
        
        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setString(1, teamName);
        pstmt.setInt(2, tournamentId);
        ResultSet rs = pstmt.executeQuery();
        
        TeamDisplayStats stats = new TeamDisplayStats();
        if (rs.next()) {
            stats.wins = rs.getInt("wins");
            stats.draws = rs.getInt("draws");
            stats.losses = rs.getInt("losses");
            stats.goalsFor = rs.getInt("goals_for");
            stats.goalsAgainst = rs.getInt("goals_against");
        }
        
        rs.close();
        pstmt.close();
        
        return stats;
    }
    
    /**
     * Hi·ªÉn th·ªã 2 ƒë·ªôi ƒë·ªìng h·∫°ng 3 (theo quy ƒë·ªãnh FIFA m·ªõi)
     */
    private void displayThirdPlaceTeams() throws SQLException {
        // T√¨m 2 ƒë·ªôi thua b√°n k·∫øt
        String sql = """
            SELECT 
                CASE 
                    WHEN m.team_a_score > m.team_b_score THEN tb.name
                    ELSE ta.name
                END as loser_name
            FROM matches m
            JOIN teams ta ON m.team_a_id = ta.id
            JOIN teams tb ON m.team_b_id = tb.id
            WHERE ta.tournament_id = ? AND tb.tournament_id = ?
            AND m.match_type = 'SEMI' AND (m.team_a_score >= 0 AND m.team_b_score >= 0)
            ORDER BY m.id
        """;

        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setInt(1, currentTournamentId);
        pstmt.setInt(2, currentTournamentId);
        ResultSet rs = pstmt.executeQuery();

        List<String> thirdPlaceTeams = new ArrayList<>();
        while (rs.next()) {
            thirdPlaceTeams.add(rs.getString("loser_name"));
        }

        rs.close();
        pstmt.close();

        if (thirdPlaceTeams.size() == 2) {
            System.out.println("ü•â ƒê·ªíNG H·∫†NG BA: " + thirdPlaceTeams.get(0) + " & " + thirdPlaceTeams.get(1));
        } else if (thirdPlaceTeams.size() == 1) {
            System.out.println("ü•â H·∫†NG BA: " + thirdPlaceTeams.get(0));
        } else {
            // Fallback: l·∫•y t·ª´ tournament_stats v·ªõi 2 c·ªôt m·ªõi
            String fallbackSql = """
                SELECT t1.name as team1_name, t2.name as team2_name
                FROM tournament_stats ts
                LEFT JOIN teams t1 ON ts.third_place_id_01 = t1.id
                LEFT JOIN teams t2 ON ts.third_place_id_02 = t2.id
                WHERE ts.tournament_id = ?
            """;
            PreparedStatement fallbackStmt = dbManager.getConnection().prepareStatement(fallbackSql);
            fallbackStmt.setInt(1, currentTournamentId);
            ResultSet fallbackRs = fallbackStmt.executeQuery();
            
            if (fallbackRs.next()) {
                String team1 = fallbackRs.getString("team1_name");
                String team2 = fallbackRs.getString("team2_name");
                
                if (team1 != null && team2 != null) {
                    System.out.println("ü•â ƒê·ªíNG H·∫†NG BA: " + team1 + " & " + team2);
                } else if (team1 != null) {
                    System.out.println("ü•â H·∫†NG BA: " + team1);
                } else if (team2 != null) {
                    System.out.println("ü•â H·∫†NG BA: " + team2);
                } else {
                    System.out.println("ü•â H·∫†NG BA: Ch∆∞a x√°c ƒë·ªãnh");
                }
            } else {
                System.out.println("ü•â H·∫†NG BA: Ch∆∞a x√°c ƒë·ªãnh");
            }
            
            fallbackRs.close();
            fallbackStmt.close();
        }
    }

    /**
     * Inner class ƒë·ªÉ l∆∞u th·ªëng k√™ hi·ªÉn th·ªã
     */
    private static class TeamDisplayStats {
        int wins, draws, losses, goalsFor, goalsAgainst;
    }

    /**
     * Create a new tournament with sample data
     * Demonstrates OOP principles with proper object creation
     */
    public void createNewTournament() {
        try {
            System.out.println("üèÜ Creating new tournament...");
            
            // Create tournament using Java object creation (OOP)
            int year = DataGenerator.getRandomWorldCupYear();
            String hostCountry = DataGenerator.getRandomHostCountry();
            String[] dates = DataGenerator.generateTournamentDates(year);
            
            String tournamentName = "World Cup " + year + " - " + hostCountry;
            
            // Insert tournament into database
            String sql = "INSERT INTO tournaments (name, year, host_country, start_date, end_date) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, tournamentName);
            pstmt.setInt(2, year);
            pstmt.setString(3, hostCountry);
            pstmt.setString(4, dates[0]);
            pstmt.setString(5, dates[1]);
            
            pstmt.executeUpdate();
            
            // Get generated tournament ID
            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                currentTournamentId = rs.getInt(1);
                System.out.println("‚úÖ Tournament created: " + tournamentName + " (ID: " + currentTournamentId + ")");
                
                // Create groups and teams using OOP
                createGroupsAndTeams();
                
                // Generate some sample matches
                generateSampleMatches();
                
                System.out.println("‚úÖ Tournament setup completed!");
            }
            
            rs.close();
            pstmt.close();
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating tournament: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Create groups and teams using OOP principles
     */
    private void createGroupsAndTeams() throws Exception {
        String[] groupNames = DataGenerator.getGroupsName();
        
        for (String groupName : groupNames) {
            // Create group
            String groupSql = "INSERT INTO groups (name, tournament_id) VALUES (?, ?)";
            PreparedStatement groupStmt = dbManager.getConnection().prepareStatement(groupSql, PreparedStatement.RETURN_GENERATED_KEYS);
            groupStmt.setString(1, groupName);
            groupStmt.setInt(2, currentTournamentId);
            groupStmt.executeUpdate();
            
            ResultSet groupRs = groupStmt.getGeneratedKeys();
            int groupId = 0;
            if (groupRs.next()) {
                groupId = groupRs.getInt(1);
            }
            groupRs.close();
            groupStmt.close();
            
            // Create 4 teams per group using OOP
            List<Team> groupTeams = DataGenerator.generateTeams(4);
            for (Team team : groupTeams) {
                // Insert team
                String teamSql = """
                    INSERT INTO teams (name, region, coach, medical_staff, is_host, 
                                     group_id, tournament_id) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """;
                
                PreparedStatement teamStmt = dbManager.getConnection().prepareStatement(teamSql, PreparedStatement.RETURN_GENERATED_KEYS);
                teamStmt.setString(1, team.getName());
                teamStmt.setString(2, team.getRegion());
                teamStmt.setString(3, team.getCoach());
                teamStmt.setString(4, team.getMedicalStaff());
                teamStmt.setBoolean(5, team.isHost());
                teamStmt.setInt(6, groupId);
                teamStmt.setInt(7, currentTournamentId);
                
                teamStmt.executeUpdate();
                
                ResultSet teamRs = teamStmt.getGeneratedKeys();
                int teamId = 0;
                if (teamRs.next()) {
                    teamId = teamRs.getInt(1);
                }
                teamRs.close();
                teamStmt.close();
                
                // Insert players for this team
                for (Player player : team.getPlayers()) {
                    String playerSql = """
                        INSERT INTO players (name, jersey_number, position, goals, 
                                           yellow_cards, red_cards, is_starting, 
                                           is_eligible, team_id) 
                        VALUES (?, ?, ?, 0, 0, 0, ?, true, ?)
                    """;
                    
                    PreparedStatement playerStmt = dbManager.getConnection().prepareStatement(playerSql);
                    playerStmt.setString(1, player.getName());
                    playerStmt.setInt(2, player.getJerseyNumber());
                    playerStmt.setString(3, player.getPosition());
                    playerStmt.setBoolean(4, player.isStarting());
                    playerStmt.setInt(5, teamId);
                    
                    playerStmt.executeUpdate();
                    playerStmt.close();
                }
            }
        }
        
        System.out.println("‚úÖ Created 8 groups with 32 teams and players");
    }
    
    /**
     * Generate sample matches using OOP
     */
    private void generateSampleMatches() throws Exception {
        // Get all teams for this tournament
        String sql = "SELECT id, name FROM teams WHERE tournament_id = ?";
        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setInt(1, currentTournamentId);
        ResultSet rs = pstmt.executeQuery();
        
        List<Integer> teamIds = new ArrayList<>();
        while (rs.next()) {
            teamIds.add(rs.getInt("id"));
        }
        rs.close();
        pstmt.close();
        
        // Generate some group stage matches
        for (int i = 0; i < teamIds.size() - 1; i += 2) {
            if (i + 1 < teamIds.size()) {
                int teamA = teamIds.get(i);
                int teamB = teamIds.get(i + 1);
                
                // Generate match score using Java logic
                int[] score = DataGenerator.generateMatchScore();
                
                String matchSql = """
                    INSERT INTO matches (team_a_id, team_b_id, team_a_score, team_b_score, 
                                       match_type, match_date, venue, referee) 
                    VALUES (?, ?, ?, ?, 'GROUP', datetime('now'), ?, ?)
                """;
                
                PreparedStatement matchStmt = dbManager.getConnection().prepareStatement(matchSql);
                matchStmt.setInt(1, teamA);
                matchStmt.setInt(2, teamB);
                matchStmt.setInt(3, score[0]);
                matchStmt.setInt(4, score[1]);
                matchStmt.setString(5, "Stadium " + (i/2 + 1));
                matchStmt.setString(6, "Referee " + (i/2 + 1));
                
                matchStmt.executeUpdate();
                matchStmt.close();
                
                // Update team statistics using Java calculations (OOP)
                updateTeamStatsAfterMatch(teamA, score[0], score[1]);
                updateTeamStatsAfterMatch(teamB, score[1], score[0]);
            }
        }
        
        System.out.println("‚úÖ Generated sample matches with calculated results");
    }
    
    /**
     * Update team statistics using Java calculations (OOP principle)
     */
    private void updateTeamStatsAfterMatch(int teamId, int goalsFor, int goalsAgainst) throws Exception {
        // Calculate points using Java logic (not SQL)
        int points = 0;
        int wins = 0, draws = 0, losses = 0;
        
        if (goalsFor > goalsAgainst) {
            points = 3;
            wins = 1;
        } else if (goalsFor == goalsAgainst) {
            points = 1;
            draws = 1;
        } else {
            losses = 1;
        }
        
        int goalDifference = goalsFor - goalsAgainst;
        
        // Update using Java-calculated values
        String sql = """
            UPDATE teams SET 
                points = points + ?, 
                goals_for = goals_for + ?, 
                goals_against = goals_against + ?, 
                goal_difference = goals_for - goals_against,
                wins = wins + ?, 
                draws = draws + ?, 
                losses = losses + ?
            WHERE id = ?
        """;
        
        PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
        pstmt.setInt(1, points);
        pstmt.setInt(2, goalsFor);
        pstmt.setInt(3, goalsAgainst);
        pstmt.setInt(4, wins);
        pstmt.setInt(5, draws);
        pstmt.setInt(6, losses);
        pstmt.setInt(7, teamId);
        
        pstmt.executeUpdate();
        pstmt.close();
    }

    /**
     * Method ƒë·ªÉ random h√≥a tournament hi·ªán t·∫°i sau khi t·∫°o
     */
    public void randomizeCurrentTournament() {
        try {
            if (currentTournamentId > 0) {
                System.out.println("üé≤ ƒêang random h√≥a tournament hi·ªán t·∫°i...");

                // L·∫•y t√™n tournament hi·ªán t·∫°i
                String selectSql = "SELECT name FROM tournaments WHERE id = ?";
                PreparedStatement selectStmt = dbManager.getConnection().prepareStatement(selectSql);
                selectStmt.setInt(1, currentTournamentId);
                ResultSet rs = selectStmt.executeQuery();

                if (rs.next()) {
                    String tournamentName = rs.getString("name");
                    // DataGenerator.randomizeTournament(currentTournamentId, tournamentName); // TODO: Implement
                    System.out.println("‚úÖ ƒê√£ random h√≥a tournament th√†nh c√¥ng!");
                }

                rs.close();
                selectStmt.close();
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi random h√≥a tournament: " + e.getMessage());
        }
    }


    /**
     * T√≠nh to√°n l·∫°i t·∫•t c·∫£ tournament stats
     */
    public void recalculateAllTournamentStats() {
        System.out.println("üìä ƒêang t√≠nh to√°n l·∫°i t·∫•t c·∫£ tournament stats...");
        statsCalculator.recalculateAllTournamentStats();
    }

    /**
     * T√≠nh to√°n l·∫°i stats cho tournament hi·ªán t·∫°i
     */
    public void recalculateCurrentTournamentStats() {
        try {
            if (currentTournamentId > 0) {
                System.out.println("üìä ƒêang t√≠nh to√°n stats cho tournament hi·ªán t·∫°i...");

                // L·∫•y t√™n tournament hi·ªán t·∫°i
                String selectSql = "SELECT name FROM tournaments WHERE id = ?";
                PreparedStatement selectStmt = dbManager.getConnection().prepareStatement(selectSql);
                selectStmt.setInt(1, currentTournamentId);
                ResultSet rs = selectStmt.executeQuery();

                if (rs.next()) {
                    String tournamentName = rs.getString("name");
                    statsCalculator.recalculateTournamentStats(currentTournamentId, tournamentName);
                    System.out.println("‚úÖ ƒê√£ t√≠nh to√°n stats cho tournament hi·ªán t·∫°i!");
                }

                rs.close();
                selectStmt.close();
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi t√≠nh to√°n stats cho tournament hi·ªán t·∫°i: " + e.getMessage());
        }
    }

    /**
     * Hi·ªÉn th·ªã t·∫•t c·∫£ tournament stats
     */
    public void displayAllTournamentStats() {
        statsCalculator.displayAllTournamentStats();
    }

    /**
     * T√≠nh l·∫°i goal_difference cho t·∫•t c·∫£ teams
     * goal_difference = goals_for - goals_against
     */
    public void recalculateAllGoalDifference() {
        try {
            System.out.println("‚öΩ ƒêang t√≠nh l·∫°i goal_difference cho t·∫•t c·∫£ teams...");

            String sql = """
                        UPDATE teams 
                        SET goal_difference = goals_for - goals_against
                        WHERE goals_for IS NOT NULL AND goals_against IS NOT NULL
                    """;

            PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
            int updatedRows = pstmt.executeUpdate();
            pstmt.close();

            System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t goal_difference cho " + updatedRows + " teams!");

        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi t√≠nh l·∫°i goal_difference: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * T√≠nh l·∫°i goal_difference cho tournament hi·ªán t·∫°i
     */
    public void recalculateCurrentTournamentGoalDifference() {
        try {
            if (currentTournamentId > 0) {
                System.out.println("‚öΩ ƒêang t√≠nh l·∫°i goal_difference cho tournament hi·ªán t·∫°i...");

                String sql = """
                            UPDATE teams 
                            SET goal_difference = goals_for - goals_against
                            WHERE tournament_id = ? 
                            AND goals_for IS NOT NULL 
                            AND goals_against IS NOT NULL
                        """;

                PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
                pstmt.setInt(1, currentTournamentId);
                int updatedRows = pstmt.executeUpdate();
                pstmt.close();

                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t goal_difference cho " + updatedRows + " teams trong tournament hi·ªán t·∫°i!");

            } else {
                System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ tournament hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t!");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi t√≠nh l·∫°i goal_difference cho tournament hi·ªán t·∫°i: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ goal_difference c·ªßa t·∫•t c·∫£ teams
     */
    public void displayGoalDifferenceStats() {
        try {
            System.out.println("üìä TH·ªêNG K√ä GOAL DIFFERENCE C·ª¶A T·∫§T C·∫¢ TEAMS");
            System.out.println("=".repeat(80));

            String sql = """
                        SELECT t.name as team_name, 
                               tour.name as tournament_name,
                               t.goals_for, 
                               t.goals_against, 
                               t.goal_difference,
                               t.points,
                               t.wins, t.draws, t.losses
                        FROM teams t
                        JOIN tournaments tour ON t.tournament_id = tour.id
                        ORDER BY t.goal_difference DESC, t.points DESC, t.goals_for DESC
                    """;

            PreparedStatement pstmt = dbManager.getConnection().prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();

            System.out.printf("%-25s %-20s %4s %4s %4s %6s %3s %3s %3s%n",
                    "TEAM", "TOURNAMENT", "GF", "GA", "GD", "PTS", "W", "D", "L");
            System.out.println("-".repeat(80));

            while (rs.next()) {
                System.out.printf("%-25s %-20s %4d %4d %+4d %6d %3d %3d %3d%n",
                        rs.getString("team_name"),
                        rs.getString("tournament_name"),
                        rs.getInt("goals_for"),
                        rs.getInt("goals_against"),
                        rs.getInt("goal_difference"),
                        rs.getInt("points"),
                        rs.getInt("wins"),
                        rs.getInt("draws"),
                        rs.getInt("losses")
                );
            }

            rs.close();
            pstmt.close();

        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi hi·ªÉn th·ªã th·ªëng k√™ goal_difference: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void close() {
        if (dbManager != null) {
            dbManager.close();
        }
    }
}