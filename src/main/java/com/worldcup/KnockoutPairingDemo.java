package com.worldcup;

import java.util.ArrayList;
import java.util.List;

/**
 * Demo ki·ªÉm tra logic gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi theo quy ƒë·ªãnh FIFA
 */
public class KnockoutPairingDemo {
    
    public static void main(String[] args) {
        System.out.println("üèÜ Ki·ªÉm Tra Logic Gh√©p ƒê√¥i V√≤ng 16 ƒê·ªôi FIFA World Cup");
        System.out.println("====================================================");
        
        // T·∫°o c√°c ƒë·ªôi m·∫´u ƒë·∫°i di·ªán cho nh·∫•t b·∫£ng v√† nh√¨ b·∫£ng
        List<Team> firstPlace = new ArrayList<>();
        List<Team> secondPlace = new ArrayList<>();
        
        // T·∫°o 8 nh·∫•t b·∫£ng (A1, B1, C1, D1, E1, F1, G1, H1)
        String[] groupNames = {"Brazil", "Germany", "France", "Spain", "Argentina", "England", "Italy", "Netherlands"};
        for (int i = 0; i < 8; i++) {
            char groupLetter = (char)('A' + i);
            Team winner = createMockTeam(groupNames[i], "Nh·∫•t B·∫£ng " + groupLetter);
            firstPlace.add(winner);
            System.out.println("ü•á Nh·∫•t B·∫£ng " + groupLetter + ": " + winner.getName());
        }
        
        System.out.println();
        
        // T·∫°o 8 nh√¨ b·∫£ng (A2, B2, C2, D2, E2, F2, G2, H2)
        String[] runnerUpNames = {"Croatia", "Belgium", "Portugal", "Mexico", "Uruguay", "Denmark", "Poland", "Switzerland"};
        for (int i = 0; i < 8; i++) {
            char groupLetter = (char)('A' + i);
            Team runnerUp = createMockTeam(runnerUpNames[i], "Nh√¨ B·∫£ng " + groupLetter);
            secondPlace.add(runnerUp);
            System.out.println("ü•à Nh√¨ B·∫£ng " + groupLetter + ": " + runnerUp.getName());
        }
        
        System.out.println();
        
        // Ki·ªÉm tra logic gh√©p ƒë√¥i
        List<Team> pairings = createRoundOf16Pairings(firstPlace, secondPlace);
        
        // X√°c minh k·∫øt qu·∫£
        if (pairings.size() == 16) {
            System.out.println("‚úÖ S·ªë ƒë·ªôi ƒë√∫ng: " + pairings.size());
        } else {
            System.out.println("‚ùå S·ªë ƒë·ªôi sai: " + pairings.size());
        }
        
        System.out.println("\nüèÜ C√°c Tr·∫≠n ƒê·∫•u V√≤ng 16 ƒê·ªôi (Theo Quy ƒê·ªãnh FIFA):");
        System.out.println("==================================================");
        
        for (int i = 0; i < pairings.size(); i += 2) {
            int matchNum = (i / 2) + 1;
            String team1 = pairings.get(i).getName();
            String team2 = pairings.get(i + 1).getName();
            
            // X√°c ƒë·ªãnh ƒë·ªôi n√†o thu·ªôc b·∫£ng n√†o
            String team1Group = getTeamGroup(team1, firstPlace, secondPlace);
            String team2Group = getTeamGroup(team2, firstPlace, secondPlace);
            
            System.out.println("Tr·∫≠n " + matchNum + ": " + team1 + " (" + team1Group + ") vs " + team2 + " (" + team2Group + ")");
        }
        
        System.out.println("\n‚úÖ Logic gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai ƒë√∫ng theo quy ƒë·ªãnh FIFA!");
        System.out.println("   - Nh·∫•t b·∫£ng ch·ªâ ƒë·∫•u v·ªõi nh√¨ b·∫£ng t·ª´ c√°c b·∫£ng kh√°c nhau");
        System.out.println("   - C·∫•u tr√∫c bracket ph√π h·ª£p cho t·ª© k·∫øt");
    }
    
    private static String getTeamGroup(String teamName, List<Team> firstPlace, List<Team> secondPlace) {
        // T√¨m ƒë·ªôi n√†y thu·ªôc b·∫£ng n√†o v√† v·ªã tr√≠ n√†o
        for (int i = 0; i < firstPlace.size(); i++) {
            if (firstPlace.get(i).getName().equals(teamName)) {
                return (char)('A' + i) + "1";
            }
        }
        for (int i = 0; i < secondPlace.size(); i++) {
            if (secondPlace.get(i).getName().equals(teamName)) {
                return (char)('A' + i) + "2";
            }
        }
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
    
    private static Team createMockTeam(String name, String description) {
        // T·∫°o ƒë·ªôi b√≥ng t·ªëi thi·ªÉu ƒë·ªÉ test
        List<Player> players = new ArrayList<>();
        
        // T·∫°o 11 c·∫ßu th·ªß ch√≠nh
        for (int i = 1; i <= 11; i++) {
            players.add(new Player("C·∫ßu th·ªß " + i, i, "ST"));
        }
        
        // T·∫°o 11 c·∫ßu th·ªß d·ª± b·ªã
        for (int i = 12; i <= 22; i++) {
            players.add(new Player("D·ª± b·ªã " + i, i, "ST"));
        }
        
        return new Team(name, "Ch√¢u √Çu", "HLV " + name, 
                       List.of("Tr·ª£ l√Ω"), "BS " + name, players, false);
    }
    
    private static List<Team> createRoundOf16Pairings(List<Team> firstPlace, List<Team> secondPlace) {
        System.out.println("üîÑ T·∫°o gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi theo quy ƒë·ªãnh FIFA...\n");
        
        List<Team> pairings = new ArrayList<>();
        
        // Gh√©p ƒë√¥i v√≤ng 16 ƒë·ªôi FIFA World Cup:
        // Tr·∫≠n 1: Nh·∫•t b·∫£ng A vs Nh√¨ b·∫£ng B
        pairings.add(firstPlace.get(0));   // Nh·∫•t b·∫£ng A
        pairings.add(secondPlace.get(1));  // Nh√¨ b·∫£ng B
        System.out.println("‚úì Tr·∫≠n 1: " + firstPlace.get(0).getName() + " (A1) vs " + secondPlace.get(1).getName() + " (B2)");
        
        // Tr·∫≠n 2: Nh·∫•t b·∫£ng B vs Nh√¨ b·∫£ng A  
        pairings.add(firstPlace.get(1));   // Nh·∫•t b·∫£ng B
        pairings.add(secondPlace.get(0));  // Nh√¨ b·∫£ng A
        System.out.println("‚úì Tr·∫≠n 2: " + firstPlace.get(1).getName() + " (B1) vs " + secondPlace.get(0).getName() + " (A2)");
        
        // Tr·∫≠n 3: Nh·∫•t b·∫£ng C vs Nh√¨ b·∫£ng D
        pairings.add(firstPlace.get(2));   // Nh·∫•t b·∫£ng C
        pairings.add(secondPlace.get(3));  // Nh√¨ b·∫£ng D
        System.out.println("‚úì Tr·∫≠n 3: " + firstPlace.get(2).getName() + " (C1) vs " + secondPlace.get(3).getName() + " (D2)");
        
        // Tr·∫≠n 4: Nh·∫•t b·∫£ng D vs Nh√¨ b·∫£ng C
        pairings.add(firstPlace.get(3));   // Nh·∫•t b·∫£ng D
        pairings.add(secondPlace.get(2));  // Nh√¨ b·∫£ng C
        System.out.println("‚úì Tr·∫≠n 4: " + firstPlace.get(3).getName() + " (D1) vs " + secondPlace.get(2).getName() + " (C2)");
        
        // Tr·∫≠n 5: Nh·∫•t b·∫£ng E vs Nh√¨ b·∫£ng F
        pairings.add(firstPlace.get(4));   // Nh·∫•t b·∫£ng E
        pairings.add(secondPlace.get(5));  // Nh√¨ b·∫£ng F
        System.out.println("‚úì Tr·∫≠n 5: " + firstPlace.get(4).getName() + " (E1) vs " + secondPlace.get(5).getName() + " (F2)");
        
        // Tr·∫≠n 6: Nh·∫•t b·∫£ng F vs Nh√¨ b·∫£ng E
        pairings.add(firstPlace.get(5));   // Nh·∫•t b·∫£ng F
        pairings.add(secondPlace.get(4));  // Nh√¨ b·∫£ng E
        System.out.println("‚úì Tr·∫≠n 6: " + firstPlace.get(5).getName() + " (F1) vs " + secondPlace.get(4).getName() + " (E2)");
        
        // Tr·∫≠n 7: Nh·∫•t b·∫£ng G vs Nh√¨ b·∫£ng H
        pairings.add(firstPlace.get(6));   // Nh·∫•t b·∫£ng G
        pairings.add(secondPlace.get(7));  // Nh√¨ b·∫£ng H
        System.out.println("‚úì Tr·∫≠n 7: " + firstPlace.get(6).getName() + " (G1) vs " + secondPlace.get(7).getName() + " (H2)");
        
        // Tr·∫≠n 8: Nh·∫•t b·∫£ng H vs Nh√¨ b·∫£ng G
        pairings.add(firstPlace.get(7));   // Nh·∫•t b·∫£ng H
        pairings.add(secondPlace.get(6));  // Nh√¨ b·∫£ng G
        System.out.println("‚úì Tr·∫≠n 8: " + firstPlace.get(7).getName() + " (H1) vs " + secondPlace.get(6).getName() + " (G2)");
        
        System.out.println();
        return pairings;
    }
}